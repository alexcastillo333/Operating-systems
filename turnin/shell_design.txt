                        +--------------------+
                        |        CS 439      |
                        |  PROJECT 0: SHELL  |
                        |   DESIGN DOCUMENT  |
                        +--------------------+




The questions in this design document should reflect the design of the code
you wrote for the project.  Your grade will reflect both the quality of your
answer in this document and the quality of the design implementation in your
code.  You may receive partial credit for answering questions for parts of
the project that you did not get to implement, but you must indicate in your
answer that there is no corresponding implementation, or you will not receive
any credit.


For each question, you should include both the name of the file(s), function
name(s), and the line numbers where the relevant code may be found---both the
code that answers the question directly and any function that you refer to in
your answer.


These design documents will be completed and submitted as a group.  Please use
this document as a guide for design and discuss the questions and their
potential answers prior to beginning implementation.


When you have completed your design document, submit it to the Canvas
assignment Project 0 Design and Documentation.


***Your submission must be a text file and each line must not extend pat 80
characters.  In addition, your submission must contain all of the original
material and not exceed 8,000 characters.  The character count will be measured
using the Linux command wc.  (Note that rtf files are NOT text files.) 


################
TEAM INFO
################
Name: Nicholas Hoang
EID: nhh355
CS login: nhh355
Email: nicholash489@gmail.com
Unique Number: 52795


Name: Alex Castillo
EID: alc5938
CS login: acastill
Email: alc5938@utexas.edu
Unique Number: 52795



Slip Days Used: 0


################
Preliminaries
################
(1) If you have any preliminary comments on your submission or notes for
    the TA, please give them here.

(2) Please cite any offline or online sources you consulted while
    preparing your submission, other than the Linux documentation,
    course text, and lecture notes.


################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() 
    begins with an input of 5?  Show the return value for 
    each child process, numbering the processes beginning 
    with 0 (the original process) and incrementing for
    each child process.


  8 child processes are created.
  child   return value
  0       5
  1       4
  2       3
  3       2
  4       1
  5       2
  6       3
  7       2
  8       1


(2) Explain how you communicated the return value of the 
    child to the parent. What feature of wait() did you use?


  Each parent of the child calls waitpid(), where the exit status of 
  the child stores the "return" value of the child when passed into 
  waitpid(). Returns are handled in fib.c:line 73 in doFib()


################
Questions regarding Part 1
################
(1) What combination of structs, arrays, and other data structures 
    did you use to represent a fully-parsed command? Pick another 
    (reasonable) representation you could have used, and give one advantage 
    and one disadvantage of the representation you chose.

    Note that you do not need to include concurrent commands in your answer. 
    Part 1 does not include this advanced shell feature.


  We largely kept the Command struct as is, where the char * array is used
  to store all arguments, with args[0] storing the command to execute.
  If there is any redirection, then outputFile in the struct is set. Since
  args is set dynamically in line 213 of utcsh.c. Since it is dynamically
  allocated, and int size is added to store the size of the array.

  Another way of representing a fully-parsed command is to represent it as
  is to keep all the tokens in single array. If there is any file redirection,
  just remove the ">" from the array and let there be some flag that denotes
  there is redirection for the current command.

  With our solution, an advantage is that everything can be quickly accessed,
  whether it is an arg, the command itself, or if there is an outputFile.
  However, the implementation is resource intensive, as it can use a lot of
  memory.


(2) An invalid script file is one which does not contain anything (i.e. 
    a size zero file). How did you detect and handle this condition?  
    Describe one other (correct) design that you could have used.


  We call getline on the beginning of the file, and if getline returns -1, 
  it means that we couldnt get a line, meaning the file does not contain 
  anything. If that is the case, we write to error and exit. If there is 
  content in the file, then fseek to SEEK_SET moves the stream pointer back 
  to the beginning of the file. We could have also called fgetc on the file 
  and checked if EOF is returned. This is handled in utcsh.c:line 118 in 
  check_file_empty().


################
Questions regarding Part 2
################
(1) Describe how your implementation ensures that concurrent
    commands are executed concurrently instead of one after 
    another.


  We can ensure concurrency because each child is calling an exec() once
  for the next command that needs to run currently. The parent does not 
  wait for the child to finish when it forks, thus concurrency is ensured.
  Concurrency is handled in utcsh.c, at line 336.


(2) One potential strategy for redirecting output is to run 
    the following code:

    ```
    FILE* output = fopen(filename, "w");
    stdout = output;
    stderr = output;
    ```

  This causes everything that would normally be written to 
  `stdout` to instead be written to the file described by 
  filename. Unfortunately, this strategy does not work for 
  output redirection in utcsh. More generally, it does not
  work any time fork-and-exec is used and we want to 
  redirect the output of the child process.

  Explain why this technique does not work when used in 
  conjunction with fork-and-exec, and why the dup2() 
  technique does not suffer the same issue.


  When you call exec(), any FILE outstreams created beforehand 
  would be overwritten, and redirection would not happen. dup2() 
  redirects to a different file descriptor, which is persistent 
  even after an exec() call. This ensures that redirection is 
  handled properly across fork-exec.


